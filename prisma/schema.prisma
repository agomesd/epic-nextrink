datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Address {
  id   String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addressLine String
  city String
  province String?
  state String?
  postCode String
  country String

  arena Arena @relation(fields: [arenaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  arenaId String @unique
}

model Arena {
  id   String @id @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address Address?

  websiteUrl String?
  phoneNumber String?

  practices Practice[] 
  teamsPrefered Team[]
}

model Association {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams  Team[]
  levels Level[]
  calibers Caliber[]

  websiteUrl String?
}

model CoachProfile {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String
  lastName String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  coachedTeams Team[] @relation("coached")
  supportedTeams Team[] @relation("supported")
}

model File {
  id   String @id @unique @default(cuid())
  blob Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     Image?
}

model Image {
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId String @unique

  contentType String
  altText     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User?
}

model Role {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Permission {
  id   String @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]
}

model User {
  id       String  @id @unique @default(cuid())
  email    String  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image   Image?  @relation(fields: [imageId], references: [fileId])
  imageId String? @unique

  password Password?
  coachProfile CoachProfile?
  playerProfile PlayerProfile?
  roles    Role[]
  session  Session[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Session {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Team {
  id        String   @id @unique @default(cuid())
  name     String
  association Association @relation(fields: [associationId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  associationId String
  level Level @relation(fields: [levelId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  levelId String
  caliber Caliber @relation(fields: [caliberId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  caliberId String
  season   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roster PlayerProfile[]
  coach CoachProfile? @relation("coached", fields: [coachId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  coachId String? @unique
  supportStaff CoachProfile[] @relation("supported")
  preferedArenas Arena[]
}

model Level {
  id   String @id @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams       Team[]
  associations Association[]
  calibers Caliber[]
}

model Caliber {
  id String @id @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  levels Level[]
  associations Association[]
  teams Team[]
}

model Practice {
  id   String @id @unique @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  start DateTime
  end DateTime
  duration Int

  location Arena @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId String
}

model Position {
  id       String  @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playerProfiles PlayerProfile[]
}

model ShotSide {
  id       String  @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playerProfiles PlayerProfile[]
}

model PlayerProfile {
  id       String  @id @unique @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName String
  lastName String
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String? @unique
  position Position? @relation(fields: [positionId], references: [id], onUpdate: Cascade)
  positionId String?
  shotSide ShotSide? @relation(fields: [shotSideId], references: [id], onUpdate: Cascade)
  shotSideId String?
  hometown String?
  dob DateTime?
  weight Float?
  height Float?
  activeTeam Team @relation(fields: [activeTeamId], references: [id], onUpdate: Cascade)
  activeTeamId String
  jerseyNumber Int?
  status Status @relation(fields: [statusId], references: [id], onUpdate: Cascade)
  statusId String
}

model Status {
  id       String  @id @unique @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playerProfiles PlayerProfile[]
}
